import React from 'react';

// SVG data fetched from official or reliable sources

const DvcIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg {...props} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
    <defs>
      <style>{`.cls-1{fill:#231f20;}.cls-2{fill:#ed1c24;}`}</style>
    </defs>
    <path className="cls-1" d="M50,0A50,50,0,1,0,100,50,50,50,0,0,0,50,0Zm0,90A40,40,0,1,1,90,50,40,40,0,0,1,50,90Z" />
    <path className="cls-2" d="M50,10A40,40,0,1,0,90,50,40,40,0,0,0,50,10Zm0,70A30,30,0,1,1,80,50,30,30,0,0,1,50,80Z" />
    <path className="cls-1" d="M50,20A30,30,0,1,0,80,50,30,30,0,0,0,50,20Zm0,50A20,20,0,1,1,70,50,20,20,0,0,1,50,70Z" />
    <path className="cls-2" d="M50,30A20,20,0,1,0,70,50,20,20,0,0,0,50,30Zm0,30A10,10,0,1,1,60,50,10,10,0,0,1,50,60Z" />
    <circle className="cls-1" cx="50" cy="50" r="10" />
  </svg>
);

const GeopandasIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg {...props} role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <title>GeoPandas</title>
        <path fill="currentColor" d="M12.0043 0C5.3911 0 0 5.3805 0 12c0 6.6108 5.3825 12 12.0043 12C18.6263 24 24 18.6108 24 12c0-6.6195-5.3824-12-11.9957-12Zm9.8288 12a9.7343 9.7343 0 0 1-.8234 3.925v-7.85c.5288 1.1958.8235 2.53.8235 3.925zm-4.0996 7.9798v-1.8715h-2.0889v3.0152a9.7946 9.7946 0 0 1-3.6403.7018c-.3033 0-.6067-.0173-.91-.0433V9.1928H9.0054v12.1646c-3.961-1.2736-6.8385-4.9906-6.8385-9.366 0-5.4239 4.4117-9.834 9.8374-9.834 2.6956 0 5.1485 1.0917 6.9253 2.8592v13.8888h.0607c-.39.3986-.8148.7538-1.2568 1.0744zM15.6446 9.2014h2.0889v4.3322h-2.0889zm-3.2849 5.3372h2.0888v4.3322h-2.0888Zm0-8.9068h2.0888v4.3321h-2.0888Zm3.285 9.1668h2.0888v2.0447h-2.0889Zm-3.285-3.5697h2.0888v2.0448h-2.0888Z"/>
    </svg>
);

const MatplotlibIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg {...props} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 180 180">
      <g stroke="currentColor" stroke-width="6" fill="none" opacity=".8">
          <circle cx="90" cy="90" r="88"/>
          <circle cx="90" cy="90" r="66"/>
          <circle cx="90" cy="90" r="44"/>
          <circle cx="90" cy="90" r="22"/>
          <path d="m90,2v176m62-26-124-124m124,0-124,124m150-62H2"/>
      </g>
      <g fill="currentColor">
          <path d="m90,90h18a18,18 0 0,0 0-5z"/>
          <path d="m90,90 34-43a55,55 0 0,0-15-8z"/>
          <path d="m90,90-16-72a74,74 0 0,0-31,15z"/>
          <path d="m90,90-58-28a65,65 0 0,0-5,39z"/>
          <path d="m90,90-33,16a37,37 0 0,0 2,5z"/>
          <path d="m90,90-10,45a46,46 0 0,0 18,0z"/>
          <path d="m90,90 46,58a74,74 0 0,0 12-12z"/>
      </g>
  </svg>
);

const SeabornIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg {...props} height="2500" preserveAspectRatio="xMidYMid" viewBox="0 0 255.993 264.54111152" xmlns="http://www.w3.org/2000/svg"><path d="m128.902 2.393a124.702 124.702 0 0 0 -124.7 124.7 124.702 124.702 0 0 0 124.7 124.698 124.702 124.702 0 0 0 124.688-123.115l.01-1.584-.01-1.584a124.702 124.702 0 0 0 -124.688-123.115z" fill="currentColor" opacity=".2"/><path d="m174.343 58.56-4.717-.112-4.718.108-4.717.328-4.715.543-4.71.753-4.706.951-4.698 1.14-4.691 1.314-4.684 1.474-4.676 1.616-4.667 1.741-4.66 1.848-4.653 1.936-4.645 2.005-4.639 2.056-4.632 2.087-9.246 4.2-4.614 2.081-4.61 2.048-4.605 2.002-4.6 1.945-4.596 1.878-4.593 1.801-4.59 1.72-4.587 1.63-4.585 1.538-4.583 1.444-4.581 1.348-4.582 1.252-4.58 1.158-4.581 1.064-4.582.974-4.582.886-4.584.804-5.028.795-.222 1.53a122.374 122.374 0 0 0 -.496 31.246l.32 2.843 6.64-2.947 4.63-2.088 9.246-4.2 4.614-2.08 4.608-2.042 4.602-1.986 4.594-1.912 4.588-1.82 4.58-1.708 4.572-1.58 4.564-1.437 4.557-1.277 4.549-1.103 4.541-.92 4.535-.723 4.53-.522 4.525-.315 4.523-.104 4.522.109 4.522.318 4.526.526 4.53.727 4.534.921 4.542 1.105 4.549 1.277 4.556 1.436 4.564 1.579 4.573 1.707 4.58 1.817 4.587 1.91 4.595 1.983 4.601 2.04 4.608 2.076 9.235 4.195 4.625 2.086 4.63 2.057 4.636 2.016 4.64 1.962 4.643 1.897 4.647 1.823 4.65 1.742 4.654 1.655 4.655 1.563 4.657 1.468 4.658 1.371 4.66 1.274 4.658 1.178 4.66 1.083 6.552 1.395.544-1.87a122.381 122.381 0 0 0 4.866-32.645l.01-1.542-.01-1.554-.032-1.664a122.399 122.399 0 0 0 -9.274-43.627l-.423-1.01-.756-1.748-4.763-2.142-4.63-2.052-4.639-2.002-4.645-1.934-4.653-1.845-4.66-1.74-4.667-1.615-4.676-1.473-4.684-1.314-4.69-1.141-4.7-.954-4.704-.755-4.71-.547zm-4.766 1.985 4.62.108 4.62.323 4.62.535 4.62.74 4.62.936 4.62 1.122 4.62 1.295 4.62 1.455 4.62 1.598 4.62 1.724 4.62 1.833 4.62 1.922 4.62 1.995 4.62 2.047 4.024 1.81a120.28 120.28 0 0 1 9.955 44.845l.032 1.636.01 1.528-.01 1.528a120.284 120.284 0 0 1 -4.783 32.085l-4.608-.98-4.62-1.074-4.62-1.168-4.62-1.263-4.62-1.36-4.62-1.455-4.62-1.551-4.62-1.643-4.62-1.73-4.62-1.813-4.62-1.887-4.62-1.953-4.62-2.01-4.62-2.052-4.62-2.083-9.24-4.198-4.62-2.082-4.62-2.047-4.62-1.994-4.62-1.923-4.62-1.833-4.62-1.724-4.62-1.598-4.62-1.454-4.62-1.296-4.62-1.122-4.62-.936-4.62-.74-4.62-.535-4.62-.323-4.62-.108-4.62.108-4.62.323-4.62.535-4.62.74-4.62.936-4.62 1.122-4.62 1.296-4.62 1.454-4.62 1.598-4.62 1.724-4.62 1.833-4.62 1.923-4.62 1.994-4.62 2.047-4.62 2.082-9.24 4.198-4.62 2.083-4.025 1.787a120.275 120.275 0 0 1 .488-30.712l3.536-.559 4.62-.81 4.62-.895 4.62-.983 4.62-1.073 4.62-1.168 4.62-1.263 4.62-1.36 4.62-1.456 4.62-1.55 4.62-1.643 4.62-1.73 4.62-1.813 4.62-1.887 4.62-1.954 4.62-2.008 4.62-2.053 4.62-2.083 9.24-4.198 4.62-2.082 4.62-2.047 4.62-1.995 4.62-1.922 4.62-1.833 4.62-1.724 4.62-1.598 4.62-1.455 4.62-1.295 4.62-1.122 4.62-.937 4.621-.74 4.62-.534 4.62-.323z" fill="none"/><path d="m169.577 60.045 4.643.108 4.643.325 4.642.537 4.641.743 4.64.94 4.638 1.127 4.636 1.3 4.634 1.46 4.632 1.601 4.636 1.73 4.627 1.836 4.626 1.925 4.625 1.997 4.623 2.048 4.201 1.893a120.778 120.778 0 0 1 10.087 45.827l.017 1.024.01 1.534-.01 1.531a120.784 120.784 0 0 1 -4.933 32.663l-5.07-1.077-4.63-1.076-4.63-1.17-4.629-1.266-4.63-1.363-4.628-1.458-4.628-1.554-4.628-1.646-4.627-1.733-4.627-1.815-4.626-1.89-4.624-1.955-4.624-2.01-4.622-2.054-4.622-2.084-9.238-4.197-4.618-2.08-4.615-2.046-4.614-1.992-4.612-1.92-4.61-1.828-4.615-1.722-4.608-1.594-4.606-1.45-4.604-1.291-4.602-1.118-4.6-.932-4.6-.737-4.597-.532-4.598-.321-4.596-.108-4.597.108-4.597.321-4.598.532-4.6.737-4.6.932-4.602 1.118-4.604 1.29-4.606 1.451-4.607 1.594-4.605 1.718-4.612 1.83-4.614 1.92-4.616 1.992-4.617 2.046-4.619 2.081-9.241 4.199-4.622 2.084-4.647 2.065a120.776 120.776 0 0 1 .465-31.882l3.892-.617 4.611-.809 4.612-.892 4.61-.98 4.611-1.072 4.61-1.165 4.611-1.26 4.611-1.358 4.612-1.453 4.611-1.547 4.612-1.64 4.613-1.728 4.614-1.81 4.614-1.885 4.615-1.951 4.617-2.007 4.617-2.052 4.619-2.083 9.241-4.198 4.623-2.083 4.625-2.05 4.626-1.996 4.627-1.926 4.63-1.836 4.626-1.727 4.632-1.602 4.634-1.459 4.636-1.3 4.638-1.126 4.64-.94 4.64-.744 4.643-.537 4.643-.325z" fill="currentColor" opacity=".4"/><path d="m95.657 115.985 4.62.108 4.62.323 4.62.535 4.62.74 4.62.936 4.62 1.122 4.62 1.296 4.62 1.454 4.62 1.598 4.62 1.724 4.62 1.833 4.62 1.923 4.62 1.994 4.62 2.047 4.62 2.082 4.62 2.099 4.62 2.099 4.62 2.083 4.62 2.053 4.62 2.009 4.62 1.953 4.62 1.887 4.62 1.813 4.62 1.73 4.62 1.643 4.62 1.55 4.62 1.457 4.62 1.36 4.62 1.262 4.62 1.168 4.62 1.074 3.955.84a120.275 120.275 0 0 1 -68.806 75.342 120.284 120.284 0 0 1 -157.154-65.096 120.283 120.283 0 0 1 -8.133-30.376l3.757-1.669 4.62-2.083 4.62-2.1 4.62-2.098 4.62-2.082 4.62-2.047 4.62-1.994 4.62-1.923 4.62-1.833 4.62-1.724 4.62-1.598 4.62-1.454 4.62-1.296 4.62-1.122 4.62-.936 4.62-.74 4.62-.535 4.62-.323z" fill="currentColor" opacity=".6"/><path d="m104.897 147.13v15.493h27.72v21.396h27.72v14.634h27.72v6.177h27.72v5.399a120.277 120.277 0 0 1 -133.81 28.893 120.284 120.284 0 0 1 -60.231-54.77v-14.434h27.72v-19.308h27.72v-3.48z" fill="currentColor"/><path d="m105.843 146.184v15.493h27.72v21.395h27.72v14.635h27.72v6.177h27.72l.002 5.322c-.624.68-1.256 1.355-1.895 2.023l-.001-5.454h-25.826v25.883c-.628.37-1.26.734-1.894 1.092v-33.151l-25.826-.001v43.982c-.63.182-1.261.358-1.894.529v-59.145h-25.826v63.185c-.631.029-1.263.053-1.894.073v-84.653h-25.826v82.65c-.633-.118-1.264-.241-1.895-.37l.001-97.774h-25.827v1.59h.001v87.785c-.635-.289-1.266-.583-1.895-.883l.001-85.01h-25.827v17.414h.001l-.001 50.93a120.27 120.27 0 0 1 -1.893-1.631v-47.406h-25.827l-.001 15.236c-.65-1.179-1.282-2.37-1.893-3.571l.002-13.558h27.72v-19.306h27.72v-3.481z" fill="currentColor"/><path d="m127.997 0a128 128 0 0 1 127.986 126.37l.01 1.627-.01 1.626a128 128 0 0 1 -127.986 126.37 128 128 0 0 1 -127.997-127.995 128 128 0 0 1 127.997-127.998zm0 4.203a123.797 123.797 0 0 0 -123.794 123.794 123.797 123.797 0 0 0 123.794 123.793 123.797 123.797 0 0 0 123.783-122.22l.01-1.573-.01-1.573a123.797 123.797 0 0 0 -123.783-122.221z" fill="currentColor"/>
  </svg>
);

// Fallback component to display when an icon is not found
const FallbackIcon = ({ name, className }: { name: string; className?: string }) => (
  <span className={`font-sans text-3xl text-primary dark:text-secondary`}>
    {name.charAt(0).toUpperCase()}
  </span>
);

interface CustomIconProps {
  name: string;
  className?: string;
}

const CustomIcon = ({ name, className }: CustomIconProps) => {
  const icons: { [key: string]: React.ReactNode } = {
    dvc: <DvcIcon className={className} />,
    geopandas: <GeopandasIcon className={className} />,
    matplotlib: <MatplotlibIcon className={className} />,
    seaborn: <SeabornIcon className={className} />,
  };

  const IconComponent = icons[name.toLowerCase()];

  return IconComponent || <FallbackIcon name={name} className={className} />;
};

export default CustomIcon;
