name: Deploy Releases and Pre-Releases

on:
  release:
    types: [published]

jobs:
  deploy_prerelease_to_staging:
    name: Deploy Pre-Release to Staging
    runs-on: self-hosted
    if: github.event.release.prerelease == true
    env:
      COMPOSE_PROJECT_NAME: portfolio-staging
    steps:
      - name: Checkout correct tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up staging environment file
        run: echo "${{ secrets.DOTENV_STAGING }}" > .env.staging

      - name: Rebuild and deploy Docker containers
        run: docker compose -f docker-compose.staging.yml up -d --build

      - name: Health Check
        run: |
          echo "⏳ Waiting for staging application health check..."

          NETWORK_NAME="${{ env.COMPOSE_PROJECT_NAME }}_default"
          SERVICE_NAME="web-staging"

          end_time=$((SECONDS+60))

          while [ $SECONDS -lt $end_time ]; do
            if docker run --rm --network=$NETWORK_NAME curlimages/curl:8.7.1 -s --fail "http://${SERVICE_NAME}:4000" -o /dev/null; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Retrying health check in 5 seconds..."
            sleep 5
          done

          echo "❌ Health check failed after 60 seconds!"
          echo "Dumping container logs for debugging..."
          docker logs web-staging
          exit 1

      - name: Clean up old Docker images
        if: always()
        run: docker image prune -a -f

  deploy_release_to_production:
    name: Deploy Release to Production
    runs-on: self-hosted
    if: github.event.release.prerelease == false
    env:
      COMPOSE_PROJECT_NAME: portfolio-prod
    steps:
      - name: Checkout correct tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up production environment file
        run: echo "${{ secrets.DOTENV_PRODUCTION }}" > .env.production

      - name: Rebuild and deploy Docker containers
        run: docker compose -f docker-compose.prod.yml up -d --build

      - name: Health Check
        run: |
          echo "⏳ Waiting for application health check..."

          NETWORK_NAME="${{ env.COMPOSE_PROJECT_NAME }}_default"
          SERVICE_NAME="prod-web"

          end_time=$((SECONDS+60))

          while [ $SECONDS -lt $end_time ]; do
            if docker run --rm --network=$NETWORK_NAME curlimages/curl:8.7.1 -s --fail "http://${SERVICE_NAME}:4000" -o /dev/null; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Retrying health check in 5 seconds..."
            sleep 5
          done

          echo "❌ Health check failed after 60 seconds!"
          echo "Dumping container logs for debugging..."
          docker logs web-prod
          exit 1

      - name: Clean up old Docker images
        if: always()
        run: docker image prune -a -f
