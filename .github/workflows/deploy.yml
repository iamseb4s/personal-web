name: Deploy Releases and Pre-Releases

on:
  release:
    types: [published]

jobs:
  build_and_test:
    name: Build, Lint & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Lint code
        working-directory: ./app
        run: npm run lint

      - name: Build project
        working-directory: ./app
        run: npm run build

      - name: Run security audit
        working-directory: ./app
        run: npm audit --audit-level=high

  handle_prerelease:
    name: Handle Pre-Release
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == true
    steps:
      - name: Log pre-release event
        run: echo "✅ Pre-release '${{ github.ref_name }}' published. No deployment will occur."

  deploy:
    name: Deploy to Production Server
    needs: build_and_test
    runs-on: self-hosted
    if: github.event.release.prerelease == false
    env:
      COMPOSE_PROJECT_NAME: portfolio-prod
    steps:
      - name: Checkout correct tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up environment file
        run: echo "${{ secrets.DOTENV_PRODUCTION }}" > .env.production

      - name: Rebuild and deploy Docker containers
        run: docker compose -f docker-compose.prod.yml up -d --build

      - name: Health Check
        run: |
          echo "⏳ Waiting for application health check..."

          NETWORK_NAME="${{ env.COMPOSE_PROJECT_NAME }}_default"
          SERVICE_NAME="prod-web"

          end_time=$((SECONDS+60))

          while [ $SECONDS -lt $end_time ]; do
            if docker run --rm --network=$NETWORK_NAME curlimages/curl:8.7.1 -s --fail "http://${SERVICE_NAME}:4000" -o /dev/null; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Retrying health check in 5 seconds..."
            sleep 5
          done

          echo "❌ Health check failed after 60 seconds!"
          echo "Dumping container logs for debugging..."
          docker logs web-prod
          exit 1

      - name: Clean up old Docker images
        if: always()
        run: docker image prune -a -f