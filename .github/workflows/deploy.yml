name: Deploy to Production

on:
  release:
    types: [published]

jobs:
  build_and_test:
    name: Build, Lint & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Lint code
        working-directory: ./app
        run: npm run lint

      - name: Build project
        working-directory: ./app
        run: npm run build

      - name: Run security audit
        working-directory: ./app
        run: npm audit --audit-level=high

  handle_prerelease:
    name: Handle Pre-Release
    runs-on: ubuntu-latest
    # Log when a pre-release event
    if: github.event.release.prerelease == true
    steps:
      - name: Log pre-release event
        run: echo "‚úÖ Pre-release '${{ github.ref_name }}' published. No deployment will occur."

  deploy:
    name: Deploy to Production Server
    needs: build_and_test
    runs-on: ubuntu-latest
    # Deploy when is a final release
    if: github.event.release.prerelease == false

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            echo "üöÄ Starting production deployment for release ${{ github.ref_name }}..."

            # Navigate to the CORRECT production directory on the server
            cd /home/sebas_std/docker/web-prod

            # Fetch all tags from the remote repository
            git fetch origin --tags

            # Checkout the specific tag of the release
            git checkout ${{ github.ref_name }}

            # Create the .env.production file from GitHub secrets
            echo "${{ secrets.DOTENV_PRODUCTION }}" > .env.production

            # Build and start the production containers
            docker-compose -f docker-compose.prod.yml up -d --build

            # Health Check to verify the deployment
            echo "‚è≥ Waiting for application health check..."
            sleep 15
            curl --fail http://localhost:4000 || (echo "‚ùå Health check failed!" && exit 1)
            echo "‚úÖ Health check passed!"

            # Clean up old, unused Docker images to save space
            docker image prune -f

            echo "‚úÖ Deployment successful!"